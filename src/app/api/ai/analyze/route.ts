import { NextRequest, NextResponse } from 'next/server';
import { createRouteHandlerClient } from '@supabase/auth-helpers-nextjs';
import { cookies } from 'next/headers';

// Interface pour les donn√©es √† analyser
interface OpportunityData {
  title: string;
  description?: string;
  url?: string;
  source: string;
  rawData?: any;
  sector?: string;
  keywords?: string[];
}

// Interface pour les r√©sultats d'analyse
interface AnalysisResult {
  relevanceScore: number;
  priorityLevel: 'low' | 'medium' | 'high' | 'critical';
  insights: {
    marketOpportunity: string;
    competitiveAdvantage: string;
    actionItems: string[];
    risks: string[];
    estimatedValue: string;
  };
  creativeContent: {
    headline: string;
    pitch: string;
    socialPosts: string[];
    emailTemplate: string;
  };
  tags: string[];
  sector: string;
}

export async function POST(request: NextRequest) {
  try {
    const supabase = createRouteHandlerClient({ cookies });
    
    // V√©rifier l'authentification
    const { data: { user }, error: authError } = await supabase.auth.getUser();
    if (authError || !user) {
      return NextResponse.json({ error: 'Non autoris√©' }, { status: 401 });
    }

    const { opportunityData, analysisType = 'full' }: { 
      opportunityData: OpportunityData; 
      analysisType?: 'quick' | 'full' | 'creative' 
    } = await request.json();

    // Validation des donn√©es
    if (!opportunityData || !opportunityData.title) {
      return NextResponse.json({ 
        error: 'Donn√©es d\'opportunit√© manquantes' 
      }, { status: 400 });
    }

    // V√©rifier les limites utilisateur
    const { data: usageCheck } = await supabase.rpc('check_user_usage_limit', {
      p_user_id: user.id,
      p_usage_type: 'ai_analysis',
      p_quantity: 1
    });

    if (!usageCheck) {
      return NextResponse.json({ 
        error: 'Limite d\'analyses IA atteinte pour ce mois' 
      }, { status: 429 });
    }

    let analysisResult: AnalysisResult;

    // Choisir la strat√©gie d'analyse selon le type
    switch (analysisType) {
      case 'quick':
        analysisResult = await performQuickAnalysis(opportunityData);
        break;
      case 'creative':
        analysisResult = await performCreativeAnalysis(opportunityData);
        break;
      default:
        analysisResult = await performFullAnalysis(opportunityData);
    }

    // Enregistrer l'usage
    await supabase.from('usage_tracking').insert({
      user_id: user.id,
      usage_type: 'ai_analysis',
      action: `analysis_${analysisType}`,
      quantity: 1,
      cost_credits: getAnalysisCost(analysisType),
      metadata: {
        analysis_type: analysisType,
        source: opportunityData.source,
        relevance_score: analysisResult.relevanceScore
      }
    });

    return NextResponse.json({
      success: true,
      analysis: analysisResult,
      metadata: {
        analysisType,
        timestamp: new Date().toISOString(),
        cost: getAnalysisCost(analysisType)
      }
    });

  } catch (error) {
    console.error('Erreur analyse IA:', error);
    return NextResponse.json({ 
      error: 'Erreur lors de l\'analyse IA' 
    }, { status: 500 });
  }
}

// Analyse rapide avec DeepSeek (√©conomique)
async function performQuickAnalysis(data: OpportunityData): Promise<AnalysisResult> {
  const prompt = `
Analyse rapide cette opportunit√© business :

Titre: ${data.title}
Description: ${data.description || 'Non fournie'}
Source: ${data.source}
Secteur: ${data.sector || 'Non d√©fini'}

Fournis une analyse JSON avec :
1. Score de pertinence (0-100)
2. Niveau de priorit√© (low/medium/high/critical)  
3. 3 insights cl√©s
4. 2 actions imm√©diates
5. Secteur principal
6. 3 tags pertinents

Format JSON strict:
{
  "relevanceScore": number,
  "priorityLevel": "low|medium|high|critical",
  "insights": {
    "marketOpportunity": "string",
    "competitiveAdvantage": "string", 
    "actionItems": ["action1", "action2"],
    "risks": ["risk1"],
    "estimatedValue": "string"
  },
  "tags": ["tag1", "tag2", "tag3"],
  "sector": "string"
}`;

  try {
    const response = await fetch('https://api.deepseek.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.DEEPSEEK_API_KEY}`
      },
      body: JSON.stringify({
        model: 'deepseek-chat',
        messages: [{ role: 'user', content: prompt }],
        temperature: 0.3,
        max_tokens: 800
      })
    });

    const result = await response.json();
    const analysisData = JSON.parse(result.choices[0].message.content);

    return {
      ...analysisData,
      creativeContent: {
        headline: `Opportunit√© ${analysisData.priorityLevel}: ${data.title}`,
        pitch: `Analyse en cours de ${data.title}`,
        socialPosts: [`üîç Nouvelle opportunit√© d√©tect√©e: ${data.title}`],
        emailTemplate: `Opportunit√© business identifi√©e: ${data.title}`
      }
    };

  } catch (error) {
    console.error('Erreur DeepSeek:', error);
    return getDefaultAnalysis(data);
  }
}

// Analyse cr√©ative avec Grok (premium)
async function performCreativeAnalysis(data: OpportunityData): Promise<AnalysisResult> {
  const prompt = `
Tu es un expert en copywriting et cr√©ation de contenu. Analyse cette opportunit√© business et cr√©e du contenu percutant :

Opportunit√©: ${data.title}
Description: ${data.description || ''}
Source: ${data.source}

Cr√©√© du contenu cr√©atif et engageant :
1. Headline accrocheur
2. Pitch de vente percutant  
3. 3 posts sociaux viraux
4. Email template personnalis√©
5. Score de pertinence et priorit√©

Format JSON:
{
  "relevanceScore": number,
  "priorityLevel": "low|medium|high|critical",
  "insights": {
    "marketOpportunity": "analyse cr√©ative du march√©",
    "competitiveAdvantage": "avantages uniques identifi√©s",
    "actionItems": ["action cr√©ative 1", "action cr√©ative 2"],
    "risks": ["risque principal"],
    "estimatedValue": "estimation cr√©ative"
  },
  "creativeContent": {
    "headline": "titre ultra-accrocheur",
    "pitch": "pitch de vente irr√©sistible",
    "socialPosts": ["post viral 1", "post viral 2", "post viral 3"],
    "emailTemplate": "email personnalis√© et engageant"
  },
  "tags": ["tag1", "tag2", "tag3"],
  "sector": "secteur identifi√©"
}`;

  try {
    const response = await fetch('https://api.x.ai/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.GROK_API_KEY}`
      },
      body: JSON.stringify({
        model: 'grok-3',
        messages: [{ role: 'user', content: prompt }],
        temperature: 0.7,
        max_tokens: 1500
      })
    });

    const result = await response.json();
    return JSON.parse(result.choices[0].message.content);

  } catch (error) {
    console.error('Erreur Grok:', error);
    return getDefaultAnalysis(data);
  }
}

// Analyse compl√®te avec DeepSeek + Grok
async function performFullAnalysis(data: OpportunityData): Promise<AnalysisResult> {
  // D'abord analyse strat√©gique avec DeepSeek
  const strategicAnalysis = await performQuickAnalysis(data);
  
  // Puis contenu cr√©atif avec Grok
  const creativeAnalysis = await performCreativeAnalysis(data);
  
  // Combiner les r√©sultats
  return {
    relevanceScore: Math.max(strategicAnalysis.relevanceScore, creativeAnalysis.relevanceScore),
    priorityLevel: strategicAnalysis.priorityLevel,
    insights: strategicAnalysis.insights,
    creativeContent: creativeAnalysis.creativeContent,
    tags: [...strategicAnalysis.tags, ...creativeAnalysis.tags].slice(0, 5),
    sector: strategicAnalysis.sector || creativeAnalysis.sector
  };
}

// Co√ªt selon le type d'analyse
function getAnalysisCost(type: string): number {
  switch (type) {
    case 'quick': return 0.01; // DeepSeek seulement
    case 'creative': return 0.05; // Grok seulement  
    case 'full': return 0.06; // DeepSeek + Grok
    default: return 0.01;
  }
}

// Analyse par d√©faut en cas d'erreur
function getDefaultAnalysis(data: OpportunityData): AnalysisResult {
  return {
    relevanceScore: 50,
    priorityLevel: 'medium',
    insights: {
      marketOpportunity: `Opportunit√© d√©tect√©e dans ${data.source}`,
      competitiveAdvantage: 'Analyse en cours',
      actionItems: ['Examiner en d√©tail', '√âvaluer la faisabilit√©'],
      risks: ['Informations limit√©es'],
      estimatedValue: '√Ä √©valuer'
    },
    creativeContent: {
      headline: `Nouvelle opportunit√©: ${data.title}`,
      pitch: `Opportunit√© identifi√©e via ${data.source}`,
      socialPosts: [`üîç Opportunit√© d√©tect√©e: ${data.title}`],
      emailTemplate: `Une nouvelle opportunit√© a √©t√© identifi√©e: ${data.title}`
    },
    tags: ['opportunit√©', 'nouveau', data.source],
    sector: data.sector || 'Non d√©fini'
  };
} 
generator client {
  provider        = "prisma-client-js"
  output          = "../src/generated/prisma"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["public"]
}

// Modèle Profile pour les données métier (remplace l'ancien User)
model Profile {
  id                    String                  @id @db.Uuid // Référence auth.users.id
  role                  String                  @default("USER")
  firstName             String?                 @map("first_name")
  lastName              String?                 @map("last_name")
  avatar_url            String?
  createdAt             DateTime                @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt             DateTime                @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  status                String                  @default("ACTIVE")
  
  // Relations
  adminLogs             AdminLog[]
  favorites             favorites[]
  product_request_votes product_request_votes[]
  product_requests      product_requests[]
  products              products[]
  packsPurchased        Pack[]                  @relation("UserPacks")

  @@map("profiles")
  @@schema("public")
}

model Category {
  id          String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String     @unique
  description String?
  products    products[]

  @@map("categories")
  @@schema("public")
}

model AdminLog {
  id           BigInt    @id @default(autoincrement())
  adminId      String?   @map("admin_id") @db.Uuid
  action       String
  target_table String?
  target_id    String?   @db.Uuid
  details      Json?
  createdAt    DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  admin        Profile?  @relation(fields: [adminId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("admin_logs")
  @@schema("public")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model favorites {
  user_id    String    @db.Uuid
  product_id String    @db.Uuid
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  products   products  @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  profiles   Profile   @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([user_id, product_id])
  @@index([product_id], map: "idx_favorites_product")
  @@index([user_id], map: "idx_favorites_user")
  @@schema("public")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model product_request_votes {
  request_id       String           @db.Uuid
  user_id          String           @db.Uuid
  created_at       DateTime?        @default(now()) @db.Timestamptz(6)
  product_requests product_requests @relation(fields: [request_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  profiles         Profile          @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([request_id, user_id])
  @@schema("public")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model product_requests {
  id                    String                  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id               String?                 @db.Uuid
  title                 String
  description           String?
  status                String                  @default("IDEA")
  votes                 Int                     @default(0)
  created_at            DateTime?               @default(now()) @db.Timestamptz(6)
  updated_at            DateTime?               @default(now()) @db.Timestamptz(6)
  source                String                  @default("AI")
  product_request_votes product_request_votes[]
  profiles              Profile?                @relation(fields: [user_id], references: [id], onUpdate: NoAction)

  @@index([user_id], map: "idx_product_requests_user")
  @@schema("public")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model product_stats {
  product_id     String    @id @db.Uuid
  views          Int       @default(0)
  downloads      Int       @default(0)
  purchases      Int       @default(0)
  last_viewed_at DateTime? @db.Timestamptz(6)
  products       products  @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@schema("public")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model products {
  id            String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title         String
  description   String?
  image_url     String?
  price         Decimal         @default(0) @db.Decimal(10, 2)
  visibility    String          @default("PUBLIC")
  status        String          @default("ACTIVE")
  creator_id    String?         @db.Uuid
  category_id   String?         @db.Uuid
  published_at  DateTime?       @db.Timestamptz(6)
  created_at    DateTime?       @default(now()) @db.Timestamptz(6)
  updated_at    DateTime?       @default(now()) @db.Timestamptz(6)
  favorites     favorites[]
  product_stats product_stats?
  categories    Category?       @relation(fields: [category_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  profiles      Profile?        @relation(fields: [creator_id], references: [id], onUpdate: NoAction)
  products_tags products_tags[]
  samples       samples[]

  @@index([category_id], map: "idx_products_category")
  @@index([creator_id], map: "idx_products_creator")
  @@index([status, visibility], map: "idx_products_status")
  @@schema("public")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model products_tags {
  product_id String   @db.Uuid
  tag_id     String   @db.Uuid
  products   products @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  tags       tags     @relation(fields: [tag_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([product_id, tag_id])
  @@schema("public")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model samples {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  product_id String?   @db.Uuid
  title      String
  file_url   String
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  products   products? @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([product_id], map: "idx_samples_product")
  @@schema("public")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model tags {
  id            String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String          @unique
  products_tags products_tags[]

  @@schema("public")
}

model Pack {
  id          String    @id @default(uuid()) @db.Uuid
  name        String
  description String?
  price       Float
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime  @updatedAt @map("updated_at") @db.Timestamptz(6)
  profiles    Profile[] @relation("UserPacks")

  @@map("packs")
  @@schema("public")
}

model TrendingIdea {
  id              String    @id @default(uuid()) @db.Uuid
  title           String
  description     String
  category        String
  difficulty      String
  revenueEstimate String
  trendScore      Int      @default(50)
  tags            String?  // Stored as JSON string
  isActive        Boolean  @default(true)
  isFeatured      Boolean  @default(false)
  createdAt       DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt       DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  @@map("trending_ideas")
  @@schema("public")
}

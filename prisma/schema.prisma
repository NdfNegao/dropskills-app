// =====================================================
// DROPSKILLS V2 - SCHÉMA ULTRA-SIMPLIFIÉ
// =====================================================
// Date: 2025-05-27
// Philosophie: "Simplicité avant tout !"

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =====================================================
// CORE BUSINESS MODELS
// =====================================================

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String?
  firstName String?
  lastName  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  createdPacks Pack[]     @relation("PackCreator")
  userPacks    UserPack[]
  favorites    Favorite[]
  aiUsage      AiUsage[]
  adminLogs    AdminLog[]
  profile      Profile?
  
  @@map("users")
}

model Profile {
  id        String   @id @default(cuid())
  role      UserRole @default(USER)
  firstName String?
  lastName  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("profiles")
}

model Category {
  id        String   @id @default(cuid())
  name      String   @unique
  slug      String   @unique
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  packs Pack[]
  
  @@map("categories")
}

model Pack {
  id          String    @id @default(cuid())
  title       String
  slug        String    @unique
  description String?
  price       Float?
  status      PackStatus @default(DRAFT)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  creatorId  String
  creator    User     @relation("PackCreator", fields: [creatorId], references: [id])
  categoryId String?
  category   Category? @relation(fields: [categoryId], references: [id])

  samples   Sample[]
  userPacks UserPack[]
  favorites Favorite[]
  stats     PackStats?
  
  @@map("packs")
}

model Sample {
  id          String   @id @default(cuid())
  title       String
  description String?
  fileUrl     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  packId String
  pack   Pack   @relation(fields: [packId], references: [id], onDelete: Cascade)

  @@map("samples")
}

model UserPack {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id])
  packId String
  pack   Pack   @relation(fields: [packId], references: [id])
  
  @@unique([userId, packId])
  @@map("user_packs")
}

model Favorite {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  
  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id])
  packId String
  pack   Pack   @relation(fields: [packId], references: [id])

  @@unique([userId, packId])
  @@map("favorites")
}

// =====================================================
// ANALYTICS ESSENTIELLES (ULTRA-SIMPLIFIÉES)
// =====================================================

model PackStats {
  id             String   @id @default(cuid())
  viewsCount     Int      @default(0)
  favoritesCount Int      @default(0)
  purchasesCount Int      @default(0)
  updatedAt      DateTime @updatedAt

  // Relations
  packId String @unique
  pack   Pack   @relation(fields: [packId], references: [id], onDelete: Cascade)

  @@map("pack_stats")
}

// =====================================================
// OUTILS IA INTÉGRÉS
// =====================================================

model AiTool {
  id          String     @id @default(cuid())
  name        String
  description String?
  toolType    AiToolType
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  
  // Relations
  aiUsage AiUsage[]

  @@map("ai_tools")
}

model AiUsage {
  id        String      @id @default(cuid())
  status    UsageStatus @default(SUCCESS)
  createdAt DateTime    @default(now())

  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id])
  toolId String
  tool   AiTool @relation(fields: [toolId], references: [id])

  @@map("ai_usage")
}

// =====================================================
// ADMINISTRATION SIMPLIFIÉE
// =====================================================

model AdminLog {
  id           String   @id @default(cuid())
  action       String
  resourceType String?
  resourceId   String?
  createdAt    DateTime @default(now())

  // Relations
  adminId String
  admin   User   @relation(fields: [adminId], references: [id])
  
  @@map("admin_logs")
}

// =====================================================
// ENUMS
// =====================================================

enum PackStatus {
  DRAFT
  ACTIVE
  ARCHIVED
  SUSPENDED
}

enum AiToolType {
  GENERATOR
  ASSISTANT
  OPTIMIZER
  ANALYZER
}

enum UsageStatus {
  SUCCESS
  ERROR
  PENDING
}

enum UserRole {
  USER
  ADMIN
  SUPER_ADMIN
}
